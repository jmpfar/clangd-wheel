name: Build Wheels
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      matrix_config:
        required: true
        type: string
        description: "JSON string containing the matrix configuration"

jobs:
  build-wheels:
    name: "Build wheels on ${{ matrix.os }} :: platform=${{ matrix.platform }} arch=${{ matrix.arch }}"
    runs-on: ${{ matrix.os }}

    strategy:
      matrix: ${{ fromJSON(inputs.matrix_config) }}

    steps:
      - uses: actions/checkout@v4

      - name: Support long paths
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: Set up msvc on Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Export macOS SDKROOT
        if: runner.os == 'macOS'
        run: echo SDKROOT=$(xcrun --sdk macosx --show-sdk-path) >> $GITHUB_ENV

      - name: Get version from file
        id: get_version
        shell: bash
        run: |
          LLVM_VERSION=$(cat clangd_version.txt)
          echo "Building llvm version $LLVM_VERSION"
          echo "LLVM_VERSION=$LLVM_VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup ccache
        if: github.event_name == 'pull_request'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ steps.get_version.outputs.LLVM_VERSION }}
          max-size: 1G
          append-timestamp: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BEFORE_TEST: rm -rf {package}/clangd
          CIBW_TEST_SKIP: "*linux*"
          CIBW_SKIP: "pp*"
          CIBW_BUILD: "cp311-${{ matrix.platform }}*"
          LLVM_CCACHE_BUILD: ${{ github.event_name == 'pull_request' && 'ON' || 'OFF' }}

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: artifacts-sdist

  test-sdist:
    name: Test build from source distribution
    needs: [build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: "3.13"

      - uses: actions/download-artifact@v5
        with:
          name: artifacts-sdist
          path: sdist

      - name: Install from SDist
        run: |
          rm -r clangd
          pip install -v sdist/*.tar.gz

      - name: Install test requirements
        run: python -m pip install -r dev-requirements.txt

      - name: Run test suite
        run: python -m pytest
